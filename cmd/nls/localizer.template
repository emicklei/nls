// Code generated by github.com/emicklei/cmd/nls. DO NOT EDIT.

package {{.Package}}

import (
	"text/template"
	"context"
	"golang.org/x/text/language"

	NLS "github.com/emicklei/nls"
)

const (
    {{- range .UniqueEntries}}
    {{- if .Description}}
	// {{constantName .}} is for {{.Description}}
    {{- end}}
	{{constantName .}} = "{{.Key}}"
    {{- end}}
)


var (
	// messages is a map of language-key to message template.
	messages = make(map[string]*template.Template,{{len .Entries}})

	// https://pkg.go.dev/golang.org/x/text/language
	Languages = []language.Tag{
		{{- range .LanguageTags}}
	 	language.MustParse("{{.}}"),
	 	{{- end }}
	}
	LanguageMatcher = language.NewMatcher(Languages)
)

func init() {	
	{{- range .Entries }}
	{{- if .Text}}
	NLS.Register(messages,"{{.Language}}.{{.Key}}",`{{.Text}}`)
	{{- end}}
	{{- end}}
}

// New returns a Localizer with zero or more languages.
func New(languages ...string) NLS.Localizer {
	return NLS.NewLocalizer(messages, languages...)
}

// Get a localized string by its message ID, with an optional fallback.
func Get(ctx context.Context, messageID string, fallback ...string) string {
	return NLS.LocalizerFromContext(ctx).Get(messageID, fallback...)
}

// Replaced returns a localized string by its message ID, with optional replacements.
func Replaced(ctx context.Context, messageID string, replacements ...map[string]any) string {
	return NLS.LocalizerFromContext(ctx).Replaced(messageID, replacements...)
}

// Format returns a localized string by its message ID, with optional key-value pairs.
func Format(ctx context.Context, messageID string, kv ...any) string {
	return NLS.LocalizerFromContext(ctx).Format(messageID, kv...)
}