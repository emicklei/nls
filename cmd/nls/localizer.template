// Code generated by github.com/emicklei/cmd/nls. DO NOT EDIT.

package {{.Package}}

import (
	"fmt"
	"strings"
	"text/template"
)

const (
    {{- range .Keys}}
	M_{{.}} = "{{.}}"
    {{- end}}
)

// all messages found in all language folders
var messages = map[string]string{
    {{- range .Entries }}
	"{{.Language}}." + M_{{.Key}}: `{{.Text}}`,
    {{- end}}
}

type Localizer struct {
	languages []string
}

// New returns a Localizer with zero or more languages.
func New(languages ...string) Localizer {
	return Localizer{languages: languages}
}

// Get returns the text associated with a key for using the available languages
// It returns an empty string if none of the languages have a (non-empty) value for the key and no fallback is provided.
func (l Localizer) Get(key string, fallback ...string) string {
	for _, lang := range l.languages {
		mapkey := fmt.Sprintf("%s.%s", lang, key)
		if v, ok := messages[mapkey]; ok && len(v) > 0 {
			return v
		}
	}
	if len(fallback) > 0 {
		return fallback[0]
	}
	return ""
}

// Replaced returns the text after applying substitutions using the replacements.
// Returns an empty string if there no such key.
func (l Localizer) Replaced(key string, replacements ...map[string]any) string {
	tmpl := l.Get(key)
	if len(replacements) == 0 {
		return tmpl
	}
	// If no replacements are provided, return the template as is.
	if len(replacements) == 0 {
		return tmpl
	}
	// If the tmpl doesn't have any substitutions, no need to template.Execute.
	if !strings.Contains(tmpl, "}}") {
		return tmpl
	}
	replacer, err := template.New("replacer").Parse(tmpl)
	if err != nil {
		return err.Error()
	}
	buf := new(strings.Builder)
	if err := replacer.Execute(buf, replacements[0]); err != nil {
		return err.Error()
	}
	return buf.String()
}