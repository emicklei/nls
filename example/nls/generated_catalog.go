// Code generated by github.com/emicklei/cmd/nls. DO NOT EDIT.

package nls

import (
	"text/template"
	"context"
	"golang.org/x/text/language"

	NLS "github.com/emicklei/nls"
)

const (
	// M_bestaat is for of niet
	M_bestaat = "bestaat"
	M_cats1 = "cats"
	// M_hello is for hallo
	M_hello = "hello"
	M_multi1 = "multi"
	M_sea1 = "sea"
	M_sky = "sky"
	M_trends2_1 = "trends2"
	M_world = "world"
)


var (
	// messages is a map of language-key to message template.
	messages = make(map[string]*template.Template,16)

	// https://pkg.go.dev/golang.org/x/text/language
	Languages = []language.Tag{
	 	language.MustParse("en"),
	 	language.MustParse("nl"),
	}
	LanguageMatcher = language.NewMatcher(Languages)
)

func init() {
	NLS.Register(messages,"en.cats",`{{.count}} {{- if gt .count 1}} cats{{- else}} cat{{- end}}`)
	NLS.Register(messages,"en.multi",`{{.name}} says hello
to the world
`)
	NLS.Register(messages,"en.sea",`{{.color }} sea`)
	NLS.Register(messages,"en.sky",`Sky`)
	NLS.Register(messages,"en.trends2",`{{.value}} trends`)
	NLS.Register(messages,"en.world",`world`)
	NLS.Register(messages,"nl.bestaat",`wel`)
	NLS.Register(messages,"nl.cats",`{{.count}} {{- if gt .count 1}} katten{{- else}} kat{{- end}}`)
	NLS.Register(messages,"nl.hello",`hallo`)
	NLS.Register(messages,"nl.multi",`{{.name}} zegt hallo
tegen de wereld
`)
	NLS.Register(messages,"nl.sea",`{{.name }} zee`)
	NLS.Register(messages,"nl.trends2",`{{.value}} trends`)
	NLS.Register(messages,"nl.world",`wereld`)
}

// New returns a Localizer with zero or more languages.
func New(languages ...string) NLS.Localizer {
	return NLS.NewLocalizer(messages, languages...)
}

// Get a localized string by its message ID, with an optional fallback.
func Get(ctx context.Context, messageID string, fallback ...string) string {
	return NLS.LocalizerFromContext(ctx).Get(messageID, fallback...)
}

// Replaced returns a localized string by its message ID, with optional replacements.
func Replaced(ctx context.Context, messageID string, replacements ...map[string]any) string {
	return NLS.LocalizerFromContext(ctx).Replaced(messageID, replacements...)
}

// Format returns a localized string by its message ID, with optional key-value pairs.
func Format(ctx context.Context, messageID string, kv ...any) string {
	return NLS.LocalizerFromContext(ctx).Format(messageID, kv...)
}