// Code generated by github.com/emicklei/cmd/nls. DO NOT EDIT.

package nls

import (
	"text/template"

	NLS "github.com/emicklei/nls"
)

const (
	// M_bestaat is for of niet
	M_bestaat = "bestaat"
	M_cats1 = "cats"
	// M_hello is for hallo
	M_hello = "hello"
	M_multi1 = "multi"
	M_sea1 = "sea"
	M_sky = "sky"
	M_trends2_1 = "trends2"
	M_world = "world"
)

var (
	// messages is a map of language-key to message template.
	messages map[string]*template.Template
)

func init() {
	messages = make(map[string]*template.Template)
	messages["en."+M_cats1] = template.Must(template.New("en.cats").Parse(`{{.count}} {{- if gt .count 1}} cats{{- else}} cat{{- end}}`))
	messages["en."+M_multi1] = template.Must(template.New("en.multi").Parse(`{{.name}} says hello
to the world
`))
	messages["en."+M_sea1] = template.Must(template.New("en.sea").Parse(`{{.color }} sea`))
	messages["en."+M_sky] = template.Must(template.New("en.sky").Parse(`Sky`))
	messages["en."+M_trends2_1] = template.Must(template.New("en.trends2").Parse(`{{.value}} trends`))
	messages["en."+M_world] = template.Must(template.New("en.world").Parse(`world`))
	messages["nl."+M_bestaat] = template.Must(template.New("nl.bestaat").Parse(`wel`))
	messages["nl."+M_cats1] = template.Must(template.New("nl.cats").Parse(`{{.count}} {{- if gt .count 1}} katten{{- else}} kat{{- end}}`))
	messages["nl."+M_hello] = template.Must(template.New("nl.hello").Parse(`hallo`))
	messages["nl."+M_multi1] = template.Must(template.New("nl.multi").Parse(`{{.name}} zegt hallo
tegen de wereld
`))
	messages["nl."+M_sea1] = template.Must(template.New("nl.sea").Parse(`{{.name }} zee`))
	messages["nl."+M_trends2_1] = template.Must(template.New("nl.trends2").Parse(`{{.value}} trends`))
	messages["nl."+M_world] = template.Must(template.New("nl.world").Parse(`wereld`))
}

// New returns a Localizer with zero or more languages.
func New(languages ...string) NLS.Localizer {
	return NLS.NewLocalizer(messages, languages...)
}
